23,24c23,24
<       getline (file, line);
<       transData.cuda_io.push_back(line);
---
>         getline (file, line);
>         transData.cuda_io.push_back(line);
40,43c40,43
<     while(!file.eof()) {
<       getline (file, line);
<       transData.loopLine.push_back(line);
<     }
---
> 	while(!file.eof()) {
>           getline (file, line);
>           transData.loopLine.push_back(line);
>        }
46,47c46
< /* This behavior is wrong 
<  * TODO
---
>   
54,65c53,64
<     loc = transData.loop_file.at(i).find_first_of("{");
<     for(int j = 0; j < transData.loopLine.size(); j++) {
<       if(transData.loopLine.at(j) == transData.loop_file.at(i) && counter < 2) {
<         if(loc > -1) {
<           transData.loop_file.at(i) = "if("+var + upper+"){";
<           loc = -1;
<         } else {
<           transData.loop_file.at(i) = "if("+var + upper+")";
<         }
<         counter++;
<       }
<     }
---
>         loc = transData.loop_file.at(i).find_first_of("{");
> 	for(int j = 0; j < transData.loopLine.size(); j++) {
> 		if(transData.loopLine.at(j) == transData.loop_file.at(i) && counter < 2) {
> 			if(loc > -1) {
> 			 transData.loop_file.at(i) = "if("+var + upper+"){";
> 			 loc = -1;
> 			} else {
> 			  transData.loop_file.at(i) = "if("+var + upper+")";
> 			}
> 			counter++;
> 		}
> 	}
67d65
<   */
71,72c69,70
<  * Translate from source program to targt program using a linear pattern.
<  */
---
>   * Translate from source program to targt program using a linear pattern.
>   */
74c72
<   char *attStat;
---
>    char *attStat;
92c90
<   // string type;
---
>  // string type;
95,96c93,97
<   //read file
<   readFile();
---
>  //read file
>  readFile();
> 
>  //find for loop
>  setInnerLoop();
98,100d98
<   //find for loop
<   setInnerLoop();
<   cout<<"Read the file and inner loop";
103,104c101,102
<       PreprocessingInfo::before);
< 
---
>     PreprocessingInfo::before);
>   
113,116d110
<     bool is2D = false;
<     if (transData.device_variable.at(i).find_last_of("[") != location) { 
<       is2D = true;
<     }
119,123c113,114
<     if (is2D) {
<       varDeclaration = type + " ** " + " device_" + var + ";";
<     } else { 
<       varDeclaration = type + " * " + " device_" + var + ";";
<     }
---
> 
>     varDeclaration = type + " * " + " device_" + var + ";";
125c116
<     strcpy(attStat, varDeclaration.c_str());
---
> 	  strcpy(attStat, varDeclaration.c_str());
132c123
<       PreprocessingInfo::before);
---
>     PreprocessingInfo::before);
139c130
<     strcpy(attStat, allocation.c_str());
---
> 	  strcpy(attStat, allocation.c_str());
153c144
<       strcpy(attStat, copyHD.c_str());
---
> 	  strcpy(attStat, copyHD.c_str());
158c149
< 
---
>   
163c154
<     size = transData.num_of_loops.at(0).substr(2,transData.num_of_loops.at(0).size());
---
>         size = transData.num_of_loops.at(0).substr(2,transData.num_of_loops.at(0).size());
165c156
<     size = transData.num_of_loops.at(0).substr(1, transData.num_of_loops.at(0).size());
---
>         size = transData.num_of_loops.at(0).substr(1, transData.num_of_loops.at(0).size());
170c161
<     size2 = transData.num_of_loops.at(1).substr(2,transData.num_of_loops.at(1).size());
---
> 	size2 = transData.num_of_loops.at(1).substr(2,transData.num_of_loops.at(1).size());
172c163
<     size2 = transData.num_of_loops.at(1).substr(1,transData.num_of_loops.at(1).size());
---
>         size2 = transData.num_of_loops.at(1).substr(1,transData.num_of_loops.at(1).size());
180c171
< 
---
>   
189c180
<       varDeclaration = "device_" + var;
---
>        varDeclaration = "device_" + var;
192c183
< 
---
>   
194,205c185,198
<     if(transData.scalar_variable.size() == 1) {
<       scalarParam = ", " + transData.scalar_variable.at(0);
<     } else {
<       for(int i = 0; i < transData.scalar_variable.size(); i++) {
<         if(i == 0) {
<           scalarParam = ", " + transData.scalar_variable.at(i) + ", ";
<         }
<         else if(i > 0 && i < transData.scalar_variable.size()-1) {
<           scalarParam +=  transData.scalar_variable.at(i) + ",";
<         } 
<         else if(i > 0 && i < transData.scalar_variable.size()) {
<           scalarParam += transData.scalar_variable.at(i);
---
>       if(transData.scalar_variable.size() == 1) {
>         scalarParam = ", " + transData.scalar_variable.at(0);
>       } else {
>         for(int i = 0; i < transData.scalar_variable.size(); i++) {
>            if(i == 0) {
>              scalarParam = ", " + transData.scalar_variable.at(i) + ", ";
>            }
>            else if(i > 0 && i < transData.scalar_variable.size()-1) {
>               scalarParam +=  transData.scalar_variable.at(i) + ",";
>            } 
>            else if(i > 0 && i < transData.scalar_variable.size()) {
>               scalarParam += transData.scalar_variable.at(i);
>            }
>          }
207,212c200,203
<       }
<     }
<   }
< 
<   parameters += scalarParam;
< 
---
>      }
>      
>      parameters += scalarParam;
>   
216c207
<   strcpy(attStat, kernel.c_str());
---
> 	strcpy(attStat, kernel.c_str());
223c214
< 
---
>   
226c217
<       PreprocessingInfo::before);
---
>     PreprocessingInfo::before);
228,236c219,227
<     if(transData.cuda_io.at(i) == "Output" || transData.cuda_io.at(i) == "Input/Output") {
<       location = transData.device_variable.at(i).find_first_of("[");
<       var = transData.device_variable.at(i).substr(0, location);
<       varDeclaration = "device_" + var;
<       copyHD = "  cudaMemcpy(" + var + ", " + varDeclaration + ", sizeof(" + var + "), cudaMemcpyDeviceToHost);";
<       attStat = new char[copyHD.size()+1];
<       strcpy(attStat, copyHD.c_str());
<       att = attachArbitraryText(ln, attStat,  PreprocessingInfo::before);
<     }
---
>    if(transData.cuda_io.at(i) == "Output" || transData.cuda_io.at(i) == "Input/Output") {
>     location = transData.device_variable.at(i).find_first_of("[");
>     var = transData.device_variable.at(i).substr(0, location);
>     varDeclaration = "device_" + var;
>     copyHD = "  cudaMemcpy(" + var + ", " + varDeclaration + ", sizeof(" + var + "), cudaMemcpyDeviceToHost);";
>     attStat = new char[copyHD.size()+1];
> 	  strcpy(attStat, copyHD.c_str());
>     att = attachArbitraryText(ln, attStat,  PreprocessingInfo::before);
>    }
246c237
<   att = attachArbitraryText(ln, " " ,  PreprocessingInfo::before);
---
> att = attachArbitraryText(ln, " " ,  PreprocessingInfo::before);
253,256c244,247
<     while(!file.eof()) {
<       getline (file, line);
<       src_file.push_back(line);
<     }
---
>         while(!file.eof()) {
>           getline (file, line);
>           src_file.push_back(line);
>        }
261,266c252,257
<     for(int j = 0; j < transData.loop_file.size(); j++) {
<       if(src_file.at(i) != transData.loop_file.at(j)) {
<         break;
<       }
<     }
<     cout << src_file.at(i) << endl;
---
> 	for(int j = 0; j < transData.loop_file.size(); j++) {
> 		if(src_file.at(i) != transData.loop_file.at(j)) {
> 			break;
> 		}
> 	}
> 	cout << src_file.at(i) << endl;
