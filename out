16Loop to parallelize without spaces 
for(i=1;i<=dim;i++){for(j=1;j<=dim;j++){intnumNeighbors=(((((((grid[i+1][j]+grid[i-1][j])+grid[i][j+1])+grid[i][j-1])+grid[i+1][j+1])+grid[i-1][j-1])+grid[i-1][j+1])+grid[i+1][j-1]);if((grid[i][j]==1)&&(numNeighbors<2))newGrid[i][j]=0;elseif((grid[i][j]==1)&&((numNeighbors==2)||(numNeighbors==3)))newGrid[i][j]=1;elseif((grid[i][j]==1)&&(numNeighbors>3))newGrid[i][j]=0;elseif((grid[i][j]==0)&&(numNeighbors==3))newGrid[i][j]=1;elsenewGrid[i][j]=grid[i][j];}}
Variable and types 
***************************
argc int
dim int
grid int
i int
iter int
j int
k int
main int
maxIter int
newGrid int
******************************
Parallelizing Double nested loop
Read the file and inner loop                int numNeighbors =(((((((grid[i+1][j]+grid[i-1][j])+grid[i][j+1])+grid[i][j-1])+grid[i+1][j+1])+grid[i-1][j-1])+grid[i-1][j+1])+grid[i+1][j-1]);
                if ((grid[i][j] == 1) && (numNeighbors < 2))
                    newGrid[i][j] = 0;
                else if ((grid[i][j] == 1) && ((numNeighbors == 2) || (numNeighbors == 3)))
                    newGrid[i][j] = 1;
                else if ((grid[i][j] == 1) && (numNeighbors > 3))
                    newGrid[i][j] = 0;
                else if ((grid[i][j] == 0) && (numNeighbors == 3))
                    newGrid[i][j] = 1;
                else
                    newGrid[i][j] = grid[i][j];
            }
Compiling GameOfLife_nonrandom.cu
Executing nvcc GameOfLife_nonrandom.cu
Compiler Output 
